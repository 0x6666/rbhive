#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require File.join(File.dirname(__FILE__), *%w[fb303_types])

class Version
  include ::Thrift::Struct
  VERSION = 1
  COMMENTS = 2

  ::Thrift::Struct.field_accessor self, :version, :comments
  FIELDS = {
    VERSION => {:type => ::Thrift::Types::STRING, :name => 'version'},
    COMMENTS => {:type => ::Thrift::Types::STRING, :name => 'comments'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class FieldSchema
  include ::Thrift::Struct
  NAME = 1
  TYPE = 2
  COMMENT = 3

  ::Thrift::Struct.field_accessor self, :name, :type, :comment
  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    TYPE => {:type => ::Thrift::Types::STRING, :name => 'type'},
    COMMENT => {:type => ::Thrift::Types::STRING, :name => 'comment'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class Type
  include ::Thrift::Struct
  NAME = 1
  TYPE1 = 2
  TYPE2 = 3
  FIELDS = 4

  ::Thrift::Struct.field_accessor self, :name, :type1, :type2, :fields
  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    TYPE1 => {:type => ::Thrift::Types::STRING, :name => 'type1', :optional => true},
    TYPE2 => {:type => ::Thrift::Types::STRING, :name => 'type2', :optional => true},
    FIELDS => {:type => ::Thrift::Types::LIST, :name => 'fields', :element => {:type => ::Thrift::Types::STRUCT, :class => FieldSchema}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class Database
  include ::Thrift::Struct
  NAME = 1
  DESCRIPTION = 2

  ::Thrift::Struct.field_accessor self, :name, :description
  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class SerDeInfo
  include ::Thrift::Struct
  NAME = 1
  SERIALIZATIONLIB = 2
  PARAMETERS = 3

  ::Thrift::Struct.field_accessor self, :name, :serializationLib, :parameters
  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    SERIALIZATIONLIB => {:type => ::Thrift::Types::STRING, :name => 'serializationLib'},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class Order
  include ::Thrift::Struct
  COL = 1
  ORDER = 2

  ::Thrift::Struct.field_accessor self, :col, :order
  FIELDS = {
    COL => {:type => ::Thrift::Types::STRING, :name => 'col'},
    ORDER => {:type => ::Thrift::Types::I32, :name => 'order'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class StorageDescriptor
  include ::Thrift::Struct
  COLS = 1
  LOCATION = 2
  INPUTFORMAT = 3
  OUTPUTFORMAT = 4
  COMPRESSED = 5
  NUMBUCKETS = 6
  SERDEINFO = 7
  BUCKETCOLS = 8
  SORTCOLS = 9
  PARAMETERS = 10

  ::Thrift::Struct.field_accessor self, :cols, :location, :inputFormat, :outputFormat, :compressed, :numBuckets, :serdeInfo, :bucketCols, :sortCols, :parameters
  FIELDS = {
    COLS => {:type => ::Thrift::Types::LIST, :name => 'cols', :element => {:type => ::Thrift::Types::STRUCT, :class => FieldSchema}},
    LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'},
    INPUTFORMAT => {:type => ::Thrift::Types::STRING, :name => 'inputFormat'},
    OUTPUTFORMAT => {:type => ::Thrift::Types::STRING, :name => 'outputFormat'},
    COMPRESSED => {:type => ::Thrift::Types::BOOL, :name => 'compressed'},
    NUMBUCKETS => {:type => ::Thrift::Types::I32, :name => 'numBuckets'},
    SERDEINFO => {:type => ::Thrift::Types::STRUCT, :name => 'serdeInfo', :class => SerDeInfo},
    BUCKETCOLS => {:type => ::Thrift::Types::LIST, :name => 'bucketCols', :element => {:type => ::Thrift::Types::STRING}},
    SORTCOLS => {:type => ::Thrift::Types::LIST, :name => 'sortCols', :element => {:type => ::Thrift::Types::STRUCT, :class => Order}},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class Table
  include ::Thrift::Struct
  TABLENAME = 1
  DBNAME = 2
  OWNER = 3
  CREATETIME = 4
  LASTACCESSTIME = 5
  RETENTION = 6
  SD = 7
  PARTITIONKEYS = 8
  PARAMETERS = 9

  ::Thrift::Struct.field_accessor self, :tableName, :dbName, :owner, :createTime, :lastAccessTime, :retention, :sd, :partitionKeys, :parameters
  FIELDS = {
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    OWNER => {:type => ::Thrift::Types::STRING, :name => 'owner'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    LASTACCESSTIME => {:type => ::Thrift::Types::I32, :name => 'lastAccessTime'},
    RETENTION => {:type => ::Thrift::Types::I32, :name => 'retention'},
    SD => {:type => ::Thrift::Types::STRUCT, :name => 'sd', :class => StorageDescriptor},
    PARTITIONKEYS => {:type => ::Thrift::Types::LIST, :name => 'partitionKeys', :element => {:type => ::Thrift::Types::STRUCT, :class => FieldSchema}},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class Partition
  include ::Thrift::Struct
  VALUES = 1
  DBNAME = 2
  TABLENAME = 3
  CREATETIME = 4
  LASTACCESSTIME = 5
  SD = 6
  PARAMETERS = 7

  ::Thrift::Struct.field_accessor self, :values, :dbName, :tableName, :createTime, :lastAccessTime, :sd, :parameters
  FIELDS = {
    VALUES => {:type => ::Thrift::Types::LIST, :name => 'values', :element => {:type => ::Thrift::Types::STRING}},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    CREATETIME => {:type => ::Thrift::Types::I32, :name => 'createTime'},
    LASTACCESSTIME => {:type => ::Thrift::Types::I32, :name => 'lastAccessTime'},
    SD => {:type => ::Thrift::Types::STRUCT, :name => 'sd', :class => StorageDescriptor},
    PARAMETERS => {:type => ::Thrift::Types::MAP, :name => 'parameters', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class Index
  include ::Thrift::Struct
  INDEXNAME = 1
  INDEXTYPE = 2
  TABLENAME = 3
  DBNAME = 4
  COLNAMES = 5
  PARTNAME = 6

  ::Thrift::Struct.field_accessor self, :indexName, :indexType, :tableName, :dbName, :colNames, :partName
  FIELDS = {
    INDEXNAME => {:type => ::Thrift::Types::STRING, :name => 'indexName'},
    INDEXTYPE => {:type => ::Thrift::Types::I32, :name => 'indexType'},
    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
    COLNAMES => {:type => ::Thrift::Types::LIST, :name => 'colNames', :element => {:type => ::Thrift::Types::STRING}},
    PARTNAME => {:type => ::Thrift::Types::STRING, :name => 'partName'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class Schema
  include ::Thrift::Struct
  FIELDSCHEMAS = 1
  PROPERTIES = 2

  ::Thrift::Struct.field_accessor self, :fieldSchemas, :properties
  FIELDS = {
    FIELDSCHEMAS => {:type => ::Thrift::Types::LIST, :name => 'fieldSchemas', :element => {:type => ::Thrift::Types::STRUCT, :class => FieldSchema}},
    PROPERTIES => {:type => ::Thrift::Types::MAP, :name => 'properties', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class MetaException < ::Thrift::Exception
  include ::Thrift::Struct
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  ::Thrift::Struct.field_accessor self, :message
  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class UnknownTableException < ::Thrift::Exception
  include ::Thrift::Struct
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  ::Thrift::Struct.field_accessor self, :message
  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class UnknownDBException < ::Thrift::Exception
  include ::Thrift::Struct
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  ::Thrift::Struct.field_accessor self, :message
  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class AlreadyExistsException < ::Thrift::Exception
  include ::Thrift::Struct
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  ::Thrift::Struct.field_accessor self, :message
  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class InvalidObjectException < ::Thrift::Exception
  include ::Thrift::Struct
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  ::Thrift::Struct.field_accessor self, :message
  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class NoSuchObjectException < ::Thrift::Exception
  include ::Thrift::Struct
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  ::Thrift::Struct.field_accessor self, :message
  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class IndexAlreadyExistsException < ::Thrift::Exception
  include ::Thrift::Struct
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  ::Thrift::Struct.field_accessor self, :message
  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

class InvalidOperationException < ::Thrift::Exception
  include ::Thrift::Struct
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  ::Thrift::Struct.field_accessor self, :message
  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

end

